import process from 'node:process';
import { d as defineCommand, e as legacyRootDirArgs, f as envNameArgs, l as logLevelArgs, c as cwdArgs, b as dotEnvArgs, a as logger } from '../shared/nuxi.DCVnYqfZ.mjs';
import { a as clearBuildDir } from '../shared/nuxi.8VrikUNY.mjs';
import { l as loadKit } from '../shared/nuxi.BxIDvNqq.mjs';
import { r as resolve, a as relative } from '../shared/nuxi.Do0aYBCO.mjs';
import 'node:crypto';
import 'node:path';
import 'node:util';
import 'node:tty';
import 'node:url';
import 'node:fs';
import 'node:module';
import '../shared/nuxi.C4l48OVX.mjs';
import '../shared/nuxi.D5KtpA0t.mjs';
import 'node:os';
import 'node:assert';
import 'node:v8';
import 'node:perf_hooks';
import 'node:vm';
import 'assert';
import 'fs';
import 'module';
import 'os';
import 'path';
import 'process';
import 'tty';
import 'url';
import 'util';
import 'v8';

const prepare = defineCommand({
  meta: {
    name: "prepare",
    description: "Prepare Nuxt for development/build"
  },
  args: {
    ...dotEnvArgs,
    ...cwdArgs,
    ...logLevelArgs,
    ...envNameArgs,
    ...legacyRootDirArgs
  },
  async run(ctx) {
    process.env.NODE_ENV = process.env.NODE_ENV || "production";
    const cwd = resolve(ctx.args.cwd || ctx.args.rootDir);
    const { loadNuxt, buildNuxt, writeTypes } = await loadKit(cwd);
    const nuxt = await loadNuxt({
      cwd,
      dotenv: {
        cwd,
        fileName: ctx.args.dotenv
      },
      envName: ctx.args.envName,
      // c12 will fall back to NODE_ENV
      overrides: {
        _prepare: true,
        logLevel: ctx.args.logLevel,
        ...ctx.data?.overrides
      }
    });
    await clearBuildDir(nuxt.options.buildDir);
    await buildNuxt(nuxt);
    await writeTypes(nuxt);
    logger.success(
      "Types generated in",
      relative(process.cwd(), nuxt.options.buildDir)
    );
  }
});

export { prepare as default };
